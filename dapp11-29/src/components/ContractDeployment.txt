import React, { useContext, useState, useEffect } from 'react';
import { Modal, Button, Select, Input, Form, message, Spin } from 'antd';
import { useBlockchain } from './BlockchainContext'; 
import { ChatContext, Contract } from './ChatContext';
import { compileContract, deployContract, getGasPrice } from '../services/api';

const { Option } = Select;

interface ConstructorParam {
  name: string;
  type: string;
  value: string;
}


export const ContractDeployment: React.FC = () => {
  const { 
    blockchainType, 
    setBlockchainType, 
    connect, 
    web3, 
    evmAddress 
  } = useBlockchain();
  
  const { 
    contracts, 
    setContracts,
    deployModalVisible, 
    setDeployModalVisible,
    setMessages,
    conversationId,
    setDeployedContract
  } = useContext(ChatContext)!;

  const [selectedContract, setSelectedContract] = useState<Contract | null>(null);
  const [deploymentNetwork, setDeploymentNetwork] = useState<string | null>(null);
  const [isDeploying, setIsDeploying] = useState(false);

  useEffect(() => {
    if (blockchainType === 'evm' && web3) {
      web3.eth.getChainId().then(chainId => setDeploymentNetwork(chainId.toString()));
    }
  }, [blockchainType, web3]);

  useEffect(() => {
    if (deployModalVisible) {
      setSelectedContract(null);
      setIsDeploying(false);
    }
  }, [deployModalVisible]);


  const handleCompile = async () => {
    if (!selectedContract) {
      message.error('Please select a contract to compile');
      return;
    }

    try {
      let processedSource = selectedContract.source;
      if (!processedSource.includes('SPDX-License-Identifier')) {
        processedSource = '// SPDX-License-Identifier: MIT\n' + processedSource;
      }
      if (!processedSource.includes('pragma solidity')) {
        processedSource = 'pragma solidity ^0.8.0;\n' + processedSource;
      }

      const result = await compileContract({
        source: processedSource
      });

      if (result.success && result.abi && result.bytecode) {
        setContracts((prevContracts: any) => 
          prevContracts.map((c: any) => 
            c.name === selectedContract.name
              ? { ...c, abi: result.abi, bytecode: result.bytecode }
              : c
          )
        );
        setSelectedContract({
          ...selectedContract,
          abi: result.abi,
          bytecode: result.bytecode
        });

        message.success('Contract compiled successfully');
      } else {
        setMessages((prev: any) => [...prev, {
          sender: 'system',
          content: `Compilation failed: ${result.error || 'Unknown error'}`,
          conversationId
        }]);
        message.error('Compilation failed');
      }
    } catch (error: any) {
      console.error('Compilation error:', error);
      message.error('Failed to compile: ' + error.message);
    }
  };

  const handleDeploy = async () => {
    if (!selectedContract?.abi || !selectedContract?.bytecode) {
      message.error('Please compile the contract first');
      return;
    }

    if (!evmAddress) {
      try {
        await connect();
        if (!evmAddress) {
          message.error('Please connect your wallet first');
          return;
        }
      } catch (error) {
        message.error('Failed to connect wallet');
        return;
      }
    }

    setIsDeploying(true);

    try {
      const gasPrice = await getGasPrice(Number(deploymentNetwork));
      
      const address = await deployContract(
        selectedContract.abi,
        selectedContract.bytecode,
        [],  // 空参数数组
        evmAddress,
        Number(deploymentNetwork),
        gasPrice
      );

      setDeployedContract(selectedContract.name);
      
      setContracts((prevContracts: any) => 
        prevContracts.map((c: any) => 
          c.name === selectedContract.name
            ? { ...c, address, isDeployed: true }
            : c
        )
      );

      message.success(`Contract deployed at: ${address}`);
      setMessages((prev: any) => [...prev, {
        sender: 'system',
        content: `Contract "${selectedContract.name}" successfully deployed at address: ${address}`,
        conversationId
      }]);

        setDeployModalVisible(false);
    
        setSelectedContract(null);
    } catch (error: any) {
      console.error('Deployment error:', error);
      message.error('Failed to deploy: ' + error.message);
    } finally {
      setIsDeploying(false);
    }
  };



  return (
    <Modal
      title="Deploy Contract"
      open={deployModalVisible}
      onCancel={() => setDeployModalVisible(false)}
      footer={null}
    >
      {/* <Select 
        style={{ width: '100%', marginBottom: '10px' }}
        value={blockchainType}
        onChange={setBlockchainType}
      >
        <Option value="evm">EVM</Option>
        <Option value="solana">Solana</Option>
      </Select> */}

      <Select 
        style={{ width: '100%', marginBottom: '10px' }}
        placeholder="Select a contract"
        onChange={(value) => setSelectedContract(contracts.find((c: any) => c.name === value) || null)}
      >
        {contracts.map((contract: Contract) => (
          contract.isDeployed ? (''): (
            <Option key={contract.name} value={contract.name}>{contract.name}</Option>
          )
        ))}
      </Select>

      <Select
        style={{ width: '100%', marginBottom: '10px' }}
        placeholder="Select deployment network"
        value={deploymentNetwork}
        onChange={setDeploymentNetwork}
      >
        <Option value="1">Ethereum Mainnet</Option>
        <Option value="137">Polygon Mainnet</Option>
        <Option value="56">BNB Chain Mainnet</Option>
        <Option value="80001">Mumbai Testnet</Option>
        <Option value="97">BNB Chain Testnet</Option>
      </Select>

      {/* {selectedContract?.abi && selectedContract.abi
        .find((item: any) => item.type === 'constructor')?.inputs
        .map((input: any, index: number) => (
          <Form.Item key={index} label={`${input.name} (${input.type})`}>
            <Input
              onChange={(e) => {
                const newParams = [...constructorParams];
                newParams[index] = e.target.value;
                setConstructorParams(newParams);
              }}
            />
          </Form.Item>
        ))} */}
      <div style={{ marginTop: '20px', display: 'flex', gap: '10px' }}>
        <Button 
          onClick={handleCompile}
          disabled={!selectedContract}
        >
          Compile Contract
        </Button>
        <Button 
          type="primary" 
          onClick={handleDeploy}
          disabled={
            isDeploying || 
            !selectedContract?.bytecode || 
            !selectedContract?.abi || 
            !deploymentNetwork
          }
        >
          {isDeploying ? <Spin /> : 'Deploy Contract'}
        </Button>
      </div>
    </Modal>
  );
};

